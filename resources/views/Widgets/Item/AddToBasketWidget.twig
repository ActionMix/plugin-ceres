{% import "Ceres::Widgets.Helper.TwigBuilder" as Twig %}
{% import "Ceres::Widgets.Helper.WidgetHelper" as WidgetHelper %}

{% import "Ceres::Basket.Macros.AddToBasket" as AddToBasket %}

{{ Twig.import("LayoutContainer", "Ceres::PageDesign.Macros.LayoutContainer") }}
{{ Twig.import("AddToBasket"    , "Ceres::Basket.Macros.AddToBasket") }}

{% set customClass = widget.settings.customClass.mobile %}
{% set spacingSettings = widget.settings.spacing %}
{% set inlinePadding   = WidgetHelper.getInlineSpacings(spacingSettings, spacingSettings.customPadding.mobile, "") %}
{% set inlineMargin    = WidgetHelper.getInlineSpacings(spacingSettings, "", spacingSettings.customMargin.mobile) %}
{% set spacingPadding  = WidgetHelper.getSpacingClasses(spacingSettings, spacingSettings.customPadding.mobile, "") %}
{% set spacingMargin   = WidgetHelper.getSpacingClasses(spacingSettings, "",spacingSettings.customMargin.mobile) %}

{% set buttonSize = widget.settings.buttonSize.mobile | default("") %}
{% set appearance = widget.settings.appearance.mobile | default("primary") %}

<div class="widget widget-add-to-basket widget-{{ appearance }}
    {% if spacingMargin | length > 0 %} {{ spacingMargin }}{% endif %}
    {% if customClass | length > 0 %} {{ customClass }}{% endif %}"
    {% if inlineMargin | length > 0 %} style="{{ inlineMargin }}"{% endif %}>

    {{ Twig.print(Twig.call("LayoutContainer.show", ["Ceres::SingleItem.BeforeAddToBasket", Twig.var("item.documents[0].data")])) }}
    {{ Twig.set("itemId", "item.documents[0].data.item.id") }}

    <intersect>
        <div class="w-100" v-if="$store.state.items[{{ Twig.print("itemId") }}].variation.documents">
            <add-to-basket
                    :variation-id="$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.variation.id"
                    :is-salable="!!$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.filter && $store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.filter.isSalable"
                    :has-children="!!$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.filter && $store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.filter.hasActiveChildren"
                    :interval-quantity="$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.variation.intervalOrderQuantity || 1"
                    :minimum-quantity="$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.variation.minimumOrderQuantity"
                    :maximum-quantity="!!$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.variation.maximumOrderQuantity && $store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.variation.maximumOrderQuantity > 0 ? $store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.variation.maximumOrderQuantity : null"
                    :order-properties="$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.properties.filter(function(prop) { return prop.property.isOderProperty })"
                    :has-order-properties="$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data.hasOrderProperties"
                    :use-large-scale="false"
                    :show-quantity="true"
                    :item-url="$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data | itemURL"
                    :missing-order-properties="true"
                    :has-price="$store.state.items[{{ Twig.print("itemId") }}].variation.documents[0].data | hasItemDefaultPrice"
                    button-size="{{ buttonSize }}"
                    padding-classes="{{ spacingPadding }}"
                    padding-inline-styles="{{ inlinePadding }}">
            </add-to-basket>
        </div>
        <template #loading>
            <div class="w-100 invisible">
                <button class="btn btn-block"></button>
            </div>
        </template>
    </intersect>

    {{ Twig.print(Twig.call("LayoutContainer.show", ["Ceres::SingleItem.AfterAddToBasket", Twig.var("item.documents[0].data")])) }}
</div>
