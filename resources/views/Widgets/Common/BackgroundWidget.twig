{% import "Ceres::Widgets.Helper.TwigBuilder" as Twig %}
{% import "Ceres::Widgets.Helper.WidgetHelper" as WidgetHelper %}

{% set opacity = (widget.settings.opacity.mobile | default(100)) / 100 %}
{% set fullWidth = widget.settings.fullWidth.mobile is same as (true) %}
{% set minHeightClass  = WidgetHelper.getMinHeightClass(widget.settings) %}
{% set inlineMinHeight = WidgetHelper.getInlineMinHeight(widget.settings) %}

{% set customClass     = widget.settings.customClass.mobile %}
{% set spacingSettings = widget.settings.spacing %}
{% set inlinePadding   = WidgetHelper.getInlineSpacings(spacingSettings, spacingSettings.customPadding.mobile, "") %}
{% set inlineMargin    = WidgetHelper.getInlineSpacings(spacingSettings, "", spacingSettings.customMargin.mobile) %}
{% set spacingPadding  = WidgetHelper.getSpacingClasses(spacingSettings, spacingSettings.customPadding.mobile, "") %}
{% set spacingMargin   = WidgetHelper.getSpacingClasses(spacingSettings, "",spacingSettings.customMargin.mobile) %}

{% set sourceType = widget.settings.sourceType.mobile %}
{% set customImageValue = widget.settings.customImagePath.value.mobile %}
{% set customImageType = widget.settings.customImagePath.type.mobile %}
{% set colorPalette = widget.settings.colorPalette.mobile %}
{% set customColor = widget.settings.customColor.mobile %}

{{ Twig.set("url", "" | json_encode) }}
    
{% if sourceType == "category-image1" %}
    {{ Twig.set("url", "category.details[0].imagePath") }}
    {{ Twig.set("url", "'/documents/' ~ url") }}

{% elseif sourceType == "category-image2" %}
    {{ Twig.set("url", "category.details[0].image2Path") }}
    {{ Twig.set("url", "'/documents/' ~ url") }}

{% elseif sourceType == "custom-image" %}
    {{ Twig.set("url", customImageValue | json_encode) }}

    {% if customImageType == "category" %}
        {{ Twig.set("category", Twig.call("services.category.get", [customImageValue])) }}
        {{ Twig.set("url", "category.details[0].imagePath") }}
        {{ Twig.set("url", "'/documents/' ~ url") }}

    {% elseif customImageType == "item" %}
        {{ Twig.set("itemData", Twig.call("services.item.getVariation", [customImageValue | int])) }}
        {{ Twig.set("itemData", "itemData.documents[0].data") }}
        {{ Twig.set("itemImage", "itemData.images | itemImages | orderByKey('position') | first") }}
        {{ Twig.set("url", "itemImage.url") }}

    {% endif %}

{% endif %}

<div class="widget widget-background d-flex parallax-img-container{% if customClass | length > 0 %} {{ customClass }}{% endif %}{% if minHeightClass | length > 0 %} {{ minHeightClass }}{% endif %}{% if fullWidth %} widget-fw{% endif %}{% if spacingMargin | length > 0 %} {{ spacingMargin }}{% endif %}"
     style="{% if inlineMargin | length > 0 %}{{ inlineMargin }}{% endif %}{% if inlineMinHeight | length > 0 %} {{ inlineMinHeight }}{% endif %}">
    <div>
        <div class="parallax-img-container-inner
            {% if stylingClasses | length > 0 %} {{ stylingClasses }}{% endif %}
            {% if sourceType == "color" and colorPalette != "custom" %} bg-{{ colorPalette | default("primary") }}{% endif %}
            {% if isPreview and (sourceType == "category-image1" or sourceType == "category-image2") %} widget-placeholder{% endif %}"

            style="{% if sourceType != "color" %}background-image: url({{ Twig.print("url") }});{% endif %}
                {% if opacity < 1 %} opacity:{{ opacity }};{% endif %}
                {% if sourceType == "color" and colorPalette == "custom" %} background-color: {{ customColor }}{% endif %}">

            {% if isPreview and (sourceType == "category-image1" or sourceType == "category-image2") %}
                <div>
                    <p class="title mb-0">{{ trans("Ceres::Widget.backgroundPlaceholderTitle") }}</p>
                    <p class="description mt-3">{{ trans("Ceres::Widget.backgroundPlaceholderDescription") }}</p>
                </div>
            {% endif %}
        </div>
    </div>
    <div class="container-max d-flex">
        <div class="w-100{% if spacingPadding | length > 0 %} {{ spacingPadding }}{% endif %}"{% if inlinePadding | length > 0 %} style="{{ inlinePadding }}"{% endif %}
            {% if isPreview %} data-builder-child-container="background"{% endif %}>
            {{ children.background | raw }}
        </div>
    </div>
</div>
