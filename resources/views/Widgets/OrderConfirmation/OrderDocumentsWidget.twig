{% import "Ceres::Widgets.Helper.TwigBuilder" as Twig %}
{% import "Ceres::Widgets.Helper.WidgetHelper" as WidgetHelper %}

{% set customClass = widget.settings.customClass.mobile %}
{% set spacingSettings = widget.settings.spacing %}
{% set inlinePadding   = WidgetHelper.getInlineSpacings(spacingSettings, spacingSettings.customPadding.mobile, "") %}
{% set inlineMargin    = WidgetHelper.getInlineSpacings(spacingSettings, "", spacingSettings.customMargin.mobile) %}
{% set spacingPadding  = WidgetHelper.getSpacingClasses(spacingSettings, spacingSettings.customPadding.mobile, "") %}
{% set spacingMargin   = WidgetHelper.getSpacingClasses(spacingSettings, "",spacingSettings.customMargin.mobile) %}

{% set appearance = widget.settings.appearance.mobile | default("primary") %}
{% set buttonSize = widget.settings.buttonSize.mobile | default("") %}

{{ Twig.set("enabledRoutes", Twig.call("config", ["IO.routing.enabled_routes"]) ~ " | split(\", \")") }}
{{ Twig.set("orderDocuments", data.order.documents | default([]) | json_encode) }}
{{ Twig.set("translationMap",
    {
        invoice:            "Ceres::Template.orderConfirmationOrderDocumentsInvoice",
        invoice_external:   "Ceres::Template.orderConfirmationOrderDocumentsInvoiceExternal",
        delivery_note:      "Ceres::Template.orderConfirmationOrderDocumentsDeliveryNote",
        order_confirmation: "Ceres::Template.orderConfirmationOrderDocumentsOrderConfirmation",
        pickup_delivery:    "Ceres::Template.orderConfirmationOrderDocumentsPickupDelivery",
        reversal_document:  "Ceres::Template.orderConfirmationOrderDocumentsReversalDocument"
    } | json_encode)
}}

{{ Twig.if("orderDocuments | length > 0 and ('order-document' in enabledRoutes or 'all' in enabledRoutes)") }}
    <div class="widget widget-order-documents widget-{{ appearance }}{% if customClass | length > 0 %} {{ customClass }}{% endif %}{% if spacingMargin | length > 0 %} {{ spacingMargin }}{% endif %}"
            {% if inlineMargin | length > 0 %} style="{{ inlineMargin }}"{% endif %}>
        <div class="btn-group">
            <button type="button"
                class="btn btn-appearance dropdown-toggle {{ buttonSize }}{% if spacingPadding | length > 0 %} {{ spacingPadding }}{% endif %}"
                {% if inlinePadding | length > 0 %} style="{{ inlinePadding }}"{% endif %}
                {{ Twig.if("orderDocuments | length > 0") }}
                data-toggle="dropdown"
                aria-haspopup="true"
                aria-expanded="false"{{ Twig.endif }}>
                {{ Twig.trans("Ceres::Template.orderConfirmationOrderDocuments") }}
            </button>

            <div class="dropdown-menu">
                {{ Twig.for("document", "orderDocuments", "translationMap[document.type] is defined") }}
                    <a class="dropdown-item"
                        href="/order-document/preview/{{ Twig.print("document.id") }}"
                        target="_blank">
                        {{ Twig.print(Twig.call("trans", [Twig.var("translationMap[document.type]")])) }}
                    </a>
                {{ Twig.endfor() }}
            </div>
        </div>
    </div>

{{ Twig.elseif("#{ isPreview | json_encode }") }}

    <div class="widget-placeholder prop-xs-2-1">
        <div>
            <p class="title">{{ Twig.trans("Ceres::Widget.orderDocumentsLabel") }}</p>
            <p class="description">{{ Twig.trans("Ceres::Widget.orderDocumentsPlaceholderDescription") }}</p>
        </div>
    </div>

{{ Twig.endif() }}
