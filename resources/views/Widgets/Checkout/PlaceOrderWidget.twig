{% import "Ceres::Widgets.Helper.TwigBuilder" as Twig %}
{% import "Ceres::Widgets.Helper.WidgetHelper" as WidgetHelper %}

{{ Twig.import("LayoutContainer", "Ceres::PageDesign.Macros.LayoutContainer") }}
{{ Twig.component("Ceres::Checkout.Components.PlaceOrder") }}

{% set spacingSettings = widget.settings.spacing %}
{% set inlineSpacings = WidgetHelper.getInlineSpacings(spacingSettings, spacingSettings.customPadding.mobile, spacingSettings.customMargin.mobile) %}
{% set spacingClasses = WidgetHelper.getSpacingClasses(spacingSettings, spacingSettings.customPadding.mobile, spacingSettings.customMargin.mobile) %}

{% set buttonSize = widget.settings.buttonSize.mobile %}
{% set appearance = widget.settings.appearance.mobile %}

<div class="widget widget-place-order widget-{{ appearance | default("success") }} 
    {% if spacingClasses | length > 0 %} {{ spacingClasses }}{% endif %}" 
    {% if inlineSpacings | length > 0 %} style="{{ inlineSpacings }}"{% endif %}>
    {{ Twig.print(Twig.call("LayoutContainer.show", ["Ceres::Checkout.BeforePlaceOrder"])) }}

    <place-order
        {% if buttonSize is not empty %}button-size="{{ buttonSize }}"{% endif %}
        target-continue="{{ Twig.print("homepageURL") }}{{ Twig.if("homepageURL | last != '/'") }}/{{ Twig.endif() }}place-order{{ Twig.if("urls.appendTrailingSlash") }}/{{ Twig.endif() }}"
        @payment-response="checkoutComp.showModal($event)">
    </place-order>
    
    {{ Twig.print(Twig.call("LayoutContainer.show", ["Ceres::Checkout.AfterPlaceOrder"])) }}
</div>
